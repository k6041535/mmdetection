{"env_info": "sys.platform: win32\nPython: 3.8.16 (default, Mar  2 2023, 03:18:16) [MSC v.1916 64 bit (AMD64)]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3060\nCUDA_HOME: D:\\Anaconda\\envs\\openmmlab\nNVCC: Cuda compilation tools, release 11.7, V11.7.99\nMSVC: Microsoft (R) C/C++ Optimizing Compiler Version 19.35.32215 for x64\nGCC: n/a\nPyTorch: 1.13.1\nPyTorch compiling details: PyTorch built with:\n  - C++ Version: 199711\n  - MSVC 192829337\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 2019\n  - LAPACK is enabled (usually provided by MKL)\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.7\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.5\n  - Magma 2.5.4\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=C:/cb/pytorch_1000000000000/work/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /w /bigobj -DUSE_PTHREADPOOL -openmp:experimental -IC:/cb/pytorch_1000000000000/work/mkl/include -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.14.1\nOpenCV: 4.7.0\nMMCV: 1.7.1\nMMCV Compiler: MSVC 192829924\nMMCV CUDA Compiler: 11.7\nMMDetection: 2.28.2+e9cae2d", "config": "model = dict(\n    type='FasterRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=1,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=False,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\ndataset_type = 'CocoDataset'\ndata_root = 'coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='datasets/coco/annotations/instances_train2017.json',\n        img_prefix='coco/train2017',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        classes=('Xray', )),\n    val=dict(\n        type='CocoDataset',\n        ann_file='coco/annotations/instances_val2017.json',\n        img_prefix='coco/val2017',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('Xray', )),\n    test=dict(\n        type='CocoDataset',\n        ann_file='coco/annotations/instances_val2017.json',\n        img_prefix='coco/val2017',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('Xray', )))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=10)\ncheckpoint_config = dict(interval=5)\nlog_config = dict(interval=5, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=32)\nclasses = ('Xray', )\nwork_dir = 'C:/Users/user/mmdetection/checkpoints'\nauto_resume = True\ngpu_ids = range(0, 1)\n", "seed": 498184199, "exp_name": "faster_rcnn_r50_fpn_1x_Xray.py"}
{"mode": "train", "epoch": 1, "iter": 5, "lr": 0.00018, "memory": 6545, "data_time": 1.53678, "loss_rpn_cls": 0.67967, "loss_rpn_bbox": 0.01285, "loss_cls": 0.74195, "acc": 39.23828, "loss_bbox": 0.02932, "loss": 1.46379, "time": 5.66883}
{"mode": "train", "epoch": 1, "iter": 10, "lr": 0.00038, "memory": 6545, "data_time": 0.04898, "loss_rpn_cls": 0.67474, "loss_rpn_bbox": 0.01295, "loss_cls": 0.16549, "acc": 98.75, "loss_bbox": 0.03085, "loss": 0.88402, "time": 0.88263}
{"mode": "train", "epoch": 1, "iter": 15, "lr": 0.00058, "memory": 6545, "data_time": 0.04703, "loss_rpn_cls": 0.65778, "loss_rpn_bbox": 0.01041, "loss_cls": 0.11086, "acc": 98.38867, "loss_bbox": 0.03935, "loss": 0.8184, "time": 0.89806}
{"mode": "train", "epoch": 2, "iter": 5, "lr": 0.00078, "memory": 6545, "data_time": 2.87055, "loss_rpn_cls": 0.62127, "loss_rpn_bbox": 0.00748, "loss_cls": 0.16549, "acc": 97.79297, "loss_bbox": 0.0569, "loss": 0.85114, "time": 3.78308}
{"mode": "train", "epoch": 2, "iter": 10, "lr": 0.00098, "memory": 6545, "data_time": 0.04398, "loss_rpn_cls": 0.56632, "loss_rpn_bbox": 0.00736, "loss_cls": 0.16167, "acc": 97.54883, "loss_bbox": 0.06855, "loss": 0.8039, "time": 0.9635}
{"mode": "train", "epoch": 2, "iter": 15, "lr": 0.00118, "memory": 6545, "data_time": 0.04708, "loss_rpn_cls": 0.47671, "loss_rpn_bbox": 0.00666, "loss_cls": 0.14047, "acc": 97.32422, "loss_bbox": 0.08365, "loss": 0.70749, "time": 0.91986}
{"mode": "train", "epoch": 3, "iter": 5, "lr": 0.00138, "memory": 6545, "data_time": 1.28329, "loss_rpn_cls": 0.28811, "loss_rpn_bbox": 0.00669, "loss_cls": 0.16024, "acc": 96.03516, "loss_bbox": 0.14595, "loss": 0.60099, "time": 2.20149}
{"mode": "train", "epoch": 3, "iter": 10, "lr": 0.00158, "memory": 6545, "data_time": 0.04632, "loss_rpn_cls": 0.11174, "loss_rpn_bbox": 0.00689, "loss_cls": 0.18029, "acc": 95.06836, "loss_bbox": 0.18899, "loss": 0.4879, "time": 0.92022}
{"mode": "train", "epoch": 3, "iter": 15, "lr": 0.00178, "memory": 6545, "data_time": 0.04344, "loss_rpn_cls": 0.05721, "loss_rpn_bbox": 0.00651, "loss_cls": 0.17376, "acc": 94.32617, "loss_bbox": 0.21499, "loss": 0.45247, "time": 0.91292}
{"mode": "train", "epoch": 4, "iter": 5, "lr": 0.00198, "memory": 6545, "data_time": 1.28308, "loss_rpn_cls": 0.04225, "loss_rpn_bbox": 0.00637, "loss_cls": 0.14502, "acc": 93.4082, "loss_bbox": 0.26314, "loss": 0.45678, "time": 2.22972}
{"mode": "train", "epoch": 4, "iter": 10, "lr": 0.00218, "memory": 6545, "data_time": 0.04435, "loss_rpn_cls": 0.03814, "loss_rpn_bbox": 0.00611, "loss_cls": 0.11396, "acc": 94.96094, "loss_bbox": 0.23785, "loss": 0.39606, "time": 0.92267}
{"mode": "train", "epoch": 4, "iter": 15, "lr": 0.00238, "memory": 6545, "data_time": 0.04522, "loss_rpn_cls": 0.03267, "loss_rpn_bbox": 0.00578, "loss_cls": 0.11284, "acc": 94.91211, "loss_bbox": 0.24316, "loss": 0.39445, "time": 0.91405}
{"mode": "train", "epoch": 5, "iter": 5, "lr": 0.00258, "memory": 6545, "data_time": 1.2654, "loss_rpn_cls": 0.02775, "loss_rpn_bbox": 0.00537, "loss_cls": 0.09493, "acc": 95.21484, "loss_bbox": 0.23769, "loss": 0.36574, "time": 2.19087}
{"mode": "train", "epoch": 5, "iter": 10, "lr": 0.00278, "memory": 6545, "data_time": 0.04356, "loss_rpn_cls": 0.02225, "loss_rpn_bbox": 0.00536, "loss_cls": 0.08533, "acc": 96.86523, "loss_bbox": 0.21867, "loss": 0.3316, "time": 0.92017}
{"mode": "train", "epoch": 5, "iter": 15, "lr": 0.00298, "memory": 6545, "data_time": 0.04725, "loss_rpn_cls": 0.0182, "loss_rpn_bbox": 0.00606, "loss_cls": 0.06567, "acc": 97.58789, "loss_bbox": 0.18861, "loss": 0.27854, "time": 0.92569}
{"mode": "train", "epoch": 6, "iter": 5, "lr": 0.00318, "memory": 6545, "data_time": 1.31083, "loss_rpn_cls": 0.01537, "loss_rpn_bbox": 0.00599, "loss_cls": 0.04147, "acc": 98.52539, "loss_bbox": 0.14393, "loss": 0.20677, "time": 2.24142}
{"mode": "train", "epoch": 6, "iter": 10, "lr": 0.00338, "memory": 6545, "data_time": 0.04588, "loss_rpn_cls": 0.01103, "loss_rpn_bbox": 0.00605, "loss_cls": 0.03865, "acc": 98.47656, "loss_bbox": 0.11095, "loss": 0.16668, "time": 0.93256}
{"mode": "train", "epoch": 6, "iter": 15, "lr": 0.00358, "memory": 6545, "data_time": 0.04402, "loss_rpn_cls": 0.00748, "loss_rpn_bbox": 0.0058, "loss_cls": 0.02885, "acc": 98.73047, "loss_bbox": 0.09505, "loss": 0.13718, "time": 0.93558}
{"mode": "train", "epoch": 7, "iter": 5, "lr": 0.00378, "memory": 6545, "data_time": 1.29071, "loss_rpn_cls": 0.009, "loss_rpn_bbox": 0.00568, "loss_cls": 0.02972, "acc": 98.78906, "loss_bbox": 0.08352, "loss": 0.12792, "time": 2.23839}
{"mode": "train", "epoch": 7, "iter": 10, "lr": 0.00398, "memory": 6545, "data_time": 0.0462, "loss_rpn_cls": 0.00612, "loss_rpn_bbox": 0.00577, "loss_cls": 0.03173, "acc": 98.88672, "loss_bbox": 0.08422, "loss": 0.12784, "time": 0.9196}
{"mode": "train", "epoch": 7, "iter": 15, "lr": 0.00418, "memory": 6545, "data_time": 0.04299, "loss_rpn_cls": 0.00512, "loss_rpn_bbox": 0.00546, "loss_cls": 0.02857, "acc": 98.7793, "loss_bbox": 0.08692, "loss": 0.12607, "time": 0.91349}
{"mode": "train", "epoch": 8, "iter": 5, "lr": 0.00438, "memory": 6545, "data_time": 1.26415, "loss_rpn_cls": 0.00585, "loss_rpn_bbox": 0.00523, "loss_cls": 0.02723, "acc": 98.89648, "loss_bbox": 0.07818, "loss": 0.11649, "time": 2.17842}
{"mode": "train", "epoch": 8, "iter": 10, "lr": 0.00458, "memory": 6545, "data_time": 0.04283, "loss_rpn_cls": 0.00414, "loss_rpn_bbox": 0.00469, "loss_cls": 0.03124, "acc": 98.7793, "loss_bbox": 0.0786, "loss": 0.11868, "time": 0.90918}
{"mode": "train", "epoch": 8, "iter": 15, "lr": 0.00478, "memory": 6545, "data_time": 0.0448, "loss_rpn_cls": 0.00438, "loss_rpn_bbox": 0.00485, "loss_cls": 0.02572, "acc": 98.86719, "loss_bbox": 0.05867, "loss": 0.09362, "time": 0.90784}
{"mode": "train", "epoch": 9, "iter": 5, "lr": 0.0005, "memory": 6545, "data_time": 1.27827, "loss_rpn_cls": 0.00425, "loss_rpn_bbox": 0.00402, "loss_cls": 0.027, "acc": 98.75977, "loss_bbox": 0.05295, "loss": 0.08821, "time": 2.21432}
{"mode": "train", "epoch": 9, "iter": 10, "lr": 0.00052, "memory": 6545, "data_time": 0.04317, "loss_rpn_cls": 0.00394, "loss_rpn_bbox": 0.00394, "loss_cls": 0.02183, "acc": 99.10156, "loss_bbox": 0.04686, "loss": 0.07658, "time": 0.91666}
{"mode": "train", "epoch": 9, "iter": 15, "lr": 0.00054, "memory": 6545, "data_time": 0.04482, "loss_rpn_cls": 0.00619, "loss_rpn_bbox": 0.00371, "loss_cls": 0.02259, "acc": 99.13086, "loss_bbox": 0.04452, "loss": 0.07701, "time": 0.91345}
{"mode": "train", "epoch": 10, "iter": 5, "lr": 0.00056, "memory": 6545, "data_time": 1.28224, "loss_rpn_cls": 0.00351, "loss_rpn_bbox": 0.00387, "loss_cls": 0.0212, "acc": 99.27734, "loss_bbox": 0.04425, "loss": 0.07284, "time": 2.1964}
{"mode": "train", "epoch": 10, "iter": 10, "lr": 0.00058, "memory": 6545, "data_time": 0.04514, "loss_rpn_cls": 0.00204, "loss_rpn_bbox": 0.00364, "loss_cls": 0.02019, "acc": 99.27734, "loss_bbox": 0.04565, "loss": 0.07152, "time": 0.91715}
{"mode": "train", "epoch": 10, "iter": 15, "lr": 0.0006, "memory": 6545, "data_time": 0.04607, "loss_rpn_cls": 0.00231, "loss_rpn_bbox": 0.00347, "loss_cls": 0.01859, "acc": 99.28711, "loss_bbox": 0.04301, "loss": 0.06738, "time": 0.91639}
