{"env_info": "sys.platform: win32\nPython: 3.8.16 (default, Mar  2 2023, 03:18:16) [MSC v.1916 64 bit (AMD64)]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3060\nCUDA_HOME: D:\\Anaconda\\envs\\openmmlab\nNVCC: Cuda compilation tools, release 11.7, V11.7.99\nMSVC: Microsoft (R) C/C++ Optimizing Compiler Version 19.35.32215 for x64\nGCC: n/a\nPyTorch: 1.13.1\nPyTorch compiling details: PyTorch built with:\n  - C++ Version: 199711\n  - MSVC 192829337\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 2019\n  - LAPACK is enabled (usually provided by MKL)\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.7\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.5\n  - Magma 2.5.4\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=C:/cb/pytorch_1000000000000/work/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /w /bigobj -DUSE_PTHREADPOOL -openmp:experimental -IC:/cb/pytorch_1000000000000/work/mkl/include -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.14.1\nOpenCV: 4.7.0\nMMCV: 1.7.1\nMMCV Compiler: MSVC 192829924\nMMCV CUDA Compiler: 11.7\nMMDetection: 2.28.2+e9cae2d", "config": "model = dict(\n    type='FasterRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=1,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=False,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\ndataset_type = 'CocoDataset'\ndata_root = 'coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='datasets/coco/annotations/instances_train2017.json',\n        img_prefix='coco/train2017',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        classes=('Xray', )),\n    val=dict(\n        type='CocoDataset',\n        ann_file='coco/annotations/instances_val2017.json',\n        img_prefix='coco/val2017',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('Xray', )),\n    test=dict(\n        type='CocoDataset',\n        ann_file='coco/annotations/instances_val2017.json',\n        img_prefix='coco/val2017',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('Xray', )))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nclasses = ('Xray', )\nwork_dir = './work_dirs\\faster_rcnn_r50_fpn_1x_coco_Xray'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 364806392, "exp_name": "faster_rcnn_r50_fpn_1x_coco_Xray.py"}
{"mode": "val", "epoch": 1, "iter": 6, "lr": 0.00058}
{"mode": "val", "epoch": 2, "iter": 6, "lr": 0.00118}
{"mode": "val", "epoch": 3, "iter": 6, "lr": 0.00178, "bbox_mAP": 0.1799, "bbox_mAP_50": 0.3955, "bbox_mAP_75": 0.187, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.1959, "bbox_mAP_copypaste": "0.1799 0.3955 0.1870 -1.0000 0.0000 0.1959"}
{"mode": "val", "epoch": 4, "iter": 6, "lr": 0.00238, "bbox_mAP": 0.3429, "bbox_mAP_50": 0.7621, "bbox_mAP_75": 0.1608, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.3, "bbox_mAP_l": 0.3606, "bbox_mAP_copypaste": "0.3429 0.7621 0.1608 -1.0000 0.3000 0.3606"}
{"mode": "val", "epoch": 5, "iter": 6, "lr": 0.00298, "bbox_mAP": 0.521, "bbox_mAP_50": 1.0, "bbox_mAP_75": 0.3746, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.4, "bbox_mAP_l": 0.5318, "bbox_mAP_copypaste": "0.5210 1.0000 0.3746 -1.0000 0.4000 0.5318"}
{"mode": "val", "epoch": 6, "iter": 6, "lr": 0.00358, "bbox_mAP": 0.568, "bbox_mAP_50": 1.0, "bbox_mAP_75": 0.5644, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.55, "bbox_mAP_l": 0.5732, "bbox_mAP_copypaste": "0.5680 1.0000 0.5644 -1.0000 0.5500 0.5732"}
{"mode": "val", "epoch": 7, "iter": 6, "lr": 0.00418, "bbox_mAP": 0.7691, "bbox_mAP_50": 1.0, "bbox_mAP_75": 1.0, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.8, "bbox_mAP_l": 0.7681, "bbox_mAP_copypaste": "0.7691 1.0000 1.0000 -1.0000 0.8000 0.7681"}
{"mode": "val", "epoch": 8, "iter": 6, "lr": 0.00478, "bbox_mAP": 0.7839, "bbox_mAP_50": 1.0, "bbox_mAP_75": 1.0, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.8, "bbox_mAP_l": 0.7827, "bbox_mAP_copypaste": "0.7839 1.0000 1.0000 -1.0000 0.8000 0.7827"}
{"mode": "val", "epoch": 9, "iter": 6, "lr": 0.00054, "bbox_mAP": 0.8891, "bbox_mAP_50": 1.0, "bbox_mAP_75": 1.0, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.9, "bbox_mAP_l": 0.8883, "bbox_mAP_copypaste": "0.8891 1.0000 1.0000 -1.0000 0.9000 0.8883"}
{"mode": "val", "epoch": 10, "iter": 6, "lr": 0.0006, "bbox_mAP": 0.8206, "bbox_mAP_50": 1.0, "bbox_mAP_75": 1.0, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.7, "bbox_mAP_l": 0.8322, "bbox_mAP_copypaste": "0.8206 1.0000 1.0000 -1.0000 0.7000 0.8322"}
{"mode": "val", "epoch": 11, "iter": 6, "lr": 0.00066, "bbox_mAP": 0.9252, "bbox_mAP_50": 1.0, "bbox_mAP_75": 1.0, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.9, "bbox_mAP_l": 0.9297, "bbox_mAP_copypaste": "0.9252 1.0000 1.0000 -1.0000 0.9000 0.9297"}
{"mode": "val", "epoch": 12, "iter": 6, "lr": 7e-05, "bbox_mAP": 0.9046, "bbox_mAP_50": 1.0, "bbox_mAP_75": 1.0, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.9, "bbox_mAP_l": 0.9064, "bbox_mAP_copypaste": "0.9046 1.0000 1.0000 -1.0000 0.9000 0.9064"}
